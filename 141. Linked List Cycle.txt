C++语言：

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

方法一：

class Solution {
public:
   bool hasCycle(ListNode *head) {
        set <ListNode*> s;
        while(head)
        {
            if(s.find(head)!=s.end())
                return true;
            else
                s.insert(head);
            head=head->next;
        }
        return false;    
    }
};

方法二：

class Solution {
public:
    bool hasCycle(ListNode *head) {
        if(!head)
            return false;
        unordered_map <ListNode*,bool> hash;
        ListNode *p=head;
        while(p)
        {
            if(hash.find(p)!=hash.end())
                return true;
            else
                hash[p]=true;
            p=p->next;
        }
        return false;    
    }
     bool hasCycle(ListNode *head) {
         if(!head)
             return false;
         ListNode *p1=head;
         ListNode *p2=head->next;
         while(p2 && p1!=p2)
         {
             p1=p1->next;
             p2=p2->next;
             if(!p2)
                 return false;
             p2=p2->next;
         }
         if(!p2)
             return false;
         else
             return true;          
     }
};

Python语言：

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

方法一：
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        s = set()
        while head is not None:
            if head in s:
                return True
            s.add(head)
            head=head.next
        return False
        
方法二：
class Solution(object):
        dic={}
        p=head
        while p is not None:
            if p in dic:
                return True
            else:
                dic[p]=1
            p=p.next
        return False
        
方法三：
class Solution(object):
        try:
            p1=head
            p2=head.next
            while p1 is not p2:
                p1 = p1.next
                p2 = p2.next.next
            return True
        except:
            return False
        