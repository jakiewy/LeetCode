448. Find All Numbers Disappeared in an Array

C++语言:

第一种方法:
时间、空间复杂度都是O(n)

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> l(nums.size()+1,0);
        vector<int> res;
        
        for(int i=0;i<nums.size();i++)
            l[nums[i]]++;
        for(int i=1;i<nums.size()+1;i++)
            if (l[i] == 0)
                res.push_back(i);
        return res;
    }
};
第二种方法：
不使用额外空间

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> res;
        for(int i = 0;i < nums.size();i++)
        {
            int t=abs(nums[i])-1;
            if(nums[t]>0)
                nums[t] = -nums[t];
        }
        for(int i = 0;i < nums.size();i++)
            if(nums[i]>0)
               res.push_back(i+1);
        return res;
    }
};

Python语言:

第一种方法：
时间、空间复杂度都是O(n)

class Solution(object):
    def findDisappearedNumbers(self, nums):
        l=[0]*(len(nums)+1)
        res=[]
        for i in nums:
            l[i]+=1
        for i in range(1,len(nums)+1):
            if l[i]==0:
                res.append(i)
        return res

第二种方法：
class Solution(object):
    def findDisappearedNumbers(self, nums):
        for i in xrange(len(nums)):
            index = abs(nums[i])-1
            if nums[index]>0 :
                nums[index] = -nums[index] 
        return [i+1 for i in xrange(len(nums)) if nums[i]>0]