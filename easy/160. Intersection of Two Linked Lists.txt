160. Intersection of Two Linked Lists

C++语言：

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == NULL || headB == NULL )
            return NULL;
        ListNode *p1=headA;
        ListNode *p2=headB;
        while(p1!=p2)
        {
            p1=p1?p1->next:headB;
            p2=p2?p2->next:headA;            
        }
        return p1;
    }
};

Python语言：

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if headA is None or headB is None:
            return None
        p1 = headA
        p2 = headB
        while p1 != p2:
            p1=p1.next if p1 is not None else headB
            p2=p2.next if p2 is not None else headA
        return p1