110. Balanced Binary Tree

C++语言：

方法一：
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(!root)
            return true;
        return isBalanced(root->left) && isBalanced(root->right) && abs(depth(root->left)-depth(root->right))<=1
    }
    int depth(TreeNode* root)
    {
        if(!root)
            return 0;
        else 
            return max(depth(root->left),depth(root->right))+1;
    }
};

方法二：
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return dfsHeight(root)!=-1
    }
    int dfsHeight(TreeNode* root)
    {
        if(!root)
            return 0;
        int leftHeight = dfsHeight(root->left);
        int rightHeight = dfsHeight(root->right);
        if(leftHeight == -1 || rightHeight ==-1)
            return -1;
        if(abs(leftHeight-rightHeight)>1)
            return -1;
        else
            return max(leftHeight,rightHeight)+1;
    }
};

Python语言：

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.dfsHeight(root)!=-1
    def dfsHeight(self, root):
        if root is None:
            return 0
        leftHeight = self.dfsHeight(root.left)
        rightHeight = self.dfsHeight(root.right)
        if leftHeight == -1 or rightHeight == -1 :
            return -1
        if abs(leftHeight - rightHeight)>1:
            return -1
        else:
            return max(leftHeight,rightHeight)+1     
