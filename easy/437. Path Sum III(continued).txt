437. Path Sum III

C++语言:

第一种方法:
深度优先遍历的递归方法，
总路径=从该点出发的路径数+从左孩子出发的路径数+从右孩子出发的路径数

class Solution {
public:
    int dfs(TreeNode* root, int sum)
    {
        if(!root)
            return 0;
        return (root->val == sum ?1:0) + dfs(root->left,sum - root->val) + dfs(root->right,sum - root->val);    
    }
    int pathSum(TreeNode* root, int sum) {
        if(!root)
            return 0;
        return dfs(root,sum) + pathSum(root->left,sum) + pathSum(root->right,sum);
    }
};

第二种方法：

Python语言:

第一种方法：

class Solution(object):
    def dfs(self, root, sum):
        if root is None:
            return 0
        return (1 if root.val == sum else 0) + self.dfs(root.left,sum-root.val) + self.dfs(root.right,sum-root.val)
    def pathSum(self, root, sum):
        """
        :type root: TreeNode
        :type sum: int
        :rtype: int
        """
        if root is None:
            return 0
        return self.dfs(root,sum) + self.pathSum(root.left,sum) + self.pathSum(root.right,sum)

第二种方法：
