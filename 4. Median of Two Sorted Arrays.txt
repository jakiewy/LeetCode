4. Median of Two Sorted Arrays

C++语言：

第一种方法：
时间复杂度O(n),总体思路就是找到第（n1+n2）/2 小的数
class Solution
{
public:
    double findMedianSortedArrays(vector<int> &nums1, vector<int> &nums2)
    {
        int f1, f2, n1, n2, flag;
        f1 = f2 = -1;
        n1 = nums1.size();
        n2 = nums2.size();
        //数组为空的情况
        if(n1 == 0 && n2 == 0)
            return 0;
        if(n2 == 0)
            return n1 % 2 == 0 ? ((double)nums1[n1 / 2 - 1] + nums1[n1 / 2]) / 2 : nums1[n1 / 2];
        if(n1 == 0)
            return n2 % 2 == 0 ? ((double)nums2[n2 / 2 - 1] + nums2[n2 / 2]) / 2 : nums2[n2 / 2];

        for(int i = 0; i < (n1 + n2) / 2; i++)
        {
            if(( (f1 + 1) < n1 && nums1[f1 + 1] < nums2[f2 + 1]) || (f2 + 1) >= n2)
            {
                f1++;
                flag = 1;
            }
            else
            {
                f2++;
                flag = 2;
            }
        }
        //总数为奇数的情况
        if((n1 + n2) % 2)
        {
            if(( (f1 + 1) < n1 && nums1[f1 + 1] < nums2[f2 + 1]) || (f2 + 1) >= n2)
            {
                f1++;
                flag = 1;
            }
            else
            {
                f2++;
                flag = 2;
            }
            return flag == 1 ? nums1[f1] : nums2[f2];
        }
        //总数为偶数的情况
        else
        {
            int temp = (flag == 1 ? nums1[f1] : nums2[f2]);
            cout << temp;
            if(( (f1 + 1) < n1 && nums1[f1 + 1] < nums2[f2 + 1]) || (f2 + 1) >= n2)
            {
                f1++;
                flag = 1;
            }
            else
            {
                f2++;
                flag = 2;
            }
            return (double)(temp + (flag == 1 ? nums1[f1] : nums2[f2])) / 2;
        }

    }
};

第二种方法：
时间复杂度为O(log(min(m,n)))
思路：j=(m+n+1)/2-i,要找到i使得max(A[i-1]，B[j-1])小于min(A[i],B[j])
class Solution
{
public:
    double findMedianSortedArrays(vector<int> &nums1, vector<int> &nums2)
    {
        int i, j, m, n;
        m = nums1.size();
        n = nums2.size();
        if(m > n)
        {
            nums1.swap(nums2);
            swap(n, m);
        }
        if(n == 0)
            return 0;

        int imin = 0, imax = m, half = (n + m + 1) / 2;
        int max_of_lelf, min_of_right;

        while (imin <= imax)
        {
            i = (imin + imax) / 2;
            j = half - i;
            if (i < m && nums2[j - 1] > nums1[i])
                imin = i + 1;
            else if (i > 0 && nums1[i - 1] > nums2[j])
                imax = i - 1;
            else
            {
                if(i == 0 )
                    max_of_lelf = nums2[j - 1];
                else if(j == 0)
                    max_of_lelf = nums1[i - 1];
                else
                    max_of_lelf = max(nums1[i - 1], nums2[j - 1]);

                //m+n为奇数时
                if((m + n) % 2 == 1)
                    return max_of_lelf;

                if(i == m )
                    min_of_right = nums2[j];
                else if(j == n)
                    min_of_right = nums1[i];
                else
                    min_of_right = min(nums1[i], nums2[j]);

                return (min_of_right + max_of_lelf) / 2.0;
            }
        }
    }
};

Python语言：

class Solution:
    def median(self, A, B):
        m, n = len(A), len(B)
        if m > n:
            A, B, m, n = B, A, n, m
        if n == 0:
            raise ValueError

        imin, imax, half_len = 0, m, (m + n + 1) // 2
        while imin <= imax:
            i = (imin + imax) // 2
            j = half_len - i
            if i < m and B[j-1] > A[i]:
                # i is too small, must increase it
                imin = i + 1
            elif i > 0 and A[i-1] > B[j]:
                # i is too big, must decrease it
                imax = i - 1
            else:
                # i is perfect

                if i == 0: max_of_left = B[j-1]
                elif j == 0: max_of_left = A[i-1]
                else: max_of_left = max(A[i-1], B[j-1])

                if (m + n) % 2 == 1:
                    return max_of_left

                if i == m: min_of_right = B[j]
                elif j == n: min_of_right = A[i]
                else: min_of_right = min(A[i], B[j])

                return (max_of_left + min_of_right) / 2.0
    def findMedianSortedArrays(self, nums1, nums2):
        return self.median(nums1, nums2)
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
