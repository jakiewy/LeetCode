1. Two Sum

C++语言：

方法一：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ret;
        int n=nums.size();
        int tofind;
        
        for(int i=0;i<(n-1);i++)
        {  
            tofind=target-nums[i];
            for(int j=1;j<=(n-i-1);j++)
            {
                if(nums[i+j] == tofind)
                {
                    ret.push_back(i);
                    ret.push_back(i+j);
                    return ret;
                }
            }
         }
        return ret;
    }
};

方法二：
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target){
        vector<int> res;
        unordered_map<int,int> hash;
        
        for(int i=0;i<nums.size();i++)
        {
            if(hash.find(nums[i]) != hash.end())
            { 
                res.push_back(hash[nums[i]]);
                res.push_back(i);

                return res;
            }
            else
            {
                hash[target-nums[i]]=i;
            }
        }
        return res;     
    }
};

Python语言:

方法一：
class Solution:
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        if len(nums)<=1:
            return False
        buff_dict={}
        for i in range(len(nums)):
            if nums[i] in buff_dict:
                return [buff_dict[nums[i]],i]
            else:
                buff_dict[target-nums[i]]=i
        
方法二：
class Solution:
    def twoSum(self, nums, target):
        if len(nums)<=1:
            return False
        dic={}
        for k,v in enumerate(nums):
            if v in dic:
                return [dic[v],k]
            else:
                dic[target-v]=k